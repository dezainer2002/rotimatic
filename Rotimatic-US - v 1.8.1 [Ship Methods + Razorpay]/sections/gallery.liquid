{%-liquid
	assign ss			                =   section.settings
	assign sb			                =		section.blocks

  assign scssFile               =   'gallery.scss.css' | asset_url

	capture section_galleryGrid
		render '__getParam' with { paramStart: 'section_id=' }
	endcapture
-%}

<link rel="stylesheet" href="{{ scssFile }}">

{% capture sectionHTML %}
  <div class="gallery-wrapper">
    <div class="gallery">
      {% assign mainBlockArr    =   sb | where: 'type', 'main_block' %}
      {% for block in mainBlockArr %}
        {% assign b             =   block.settings %}
        <div class="gallery-main-block" style="background-image: url({{ b.image | img_url: '400x400' }});">
          <div class="gallery-main-content">
            {% if b.show_play_icon %}
              <a
                {% if b.button_popup %}
                  data-fancybox="" data-options="{"iframe" : {"css" : {"width" : "80%", "height" : "80%"}}}"
                {% endif %}
                class="gallery-popup" href="{{ b.button_link }}" aria-label="{{ ariaLabel }}"
                {% if b.button_popup %}
                  modal-popup="{{ b.button_popup }}"
                {% endif %}
              >
                <img class="lazyload"
                  src="{{ b.play_icon | img_url: 'master' }}"
                  alt="{{ b.play_icon.alt | escape }}"
                >
              </a>
            {% endif %}

            {% if b.title != blank %}
              <h2 class="h2">{{ b.title | escape }}</h2>
            {% endif %}

            {% if b.text != blank %}
              <div class="gallery-description">{{ b.text }}</div>
            {% endif %}

            {% if b.show_play_icon == false %}
              {% if b.button_label != blank and b.button_link != blank %}
                <a href="{{ b.button_link }}"
                  class="btn btn--secondary"
                >
                  {{- b.button_label | escape -}}
                </a>
              {% endif %}
            {% endif %}
          </div>
        </div>

        {% if b.button_popup %}
          <script>
            $( document )
            .on('click', '.gallery-popup[modal-popup="true"]', function( e ) {
              try {

                e.preventDefault();
                e.stopImmediatePropagation();

                const getYoutubeUrl =   $( this ).attr( 'href' );

                const getTemp       =   templateHeroVideo( getYoutubeUrl );

                $( 'body' ).prepend( getTemp );

              }
              catch ( err ) {
                console.log ( 'ERROR .gallery-popup[modal-popup="true"]', err.message );
              }
            })

            .on('click', '.galleryVideoModal ._close_', function( e ) {
              try {

                e.stopImmediatePropagation();

                $( '.galleryVideoModal' ).remove();

              }
              catch ( err ) {
                console.log ( 'ERROR .galleryVideoModal ._close_', err.message );
              }
            });

            function templateHeroVideo( getYoutubeUrl ) {
              try {

                return `
                  <div class="galleryVideoModal">
                    <div class="_close_"><svg viewBox="0 0 50 50"><g><polygon points="2.707,48.707 25,26.414 47.293,48.707 48.707,47.293 26.414,25 48.707,2.707 47.293,1.293 25,23.586 2.707,1.293 1.293,2.707 23.586,25 1.293,47.293"></polygon></g><g></g></svg></div>
                    <div class="centerCenter">
                      <iframe class="youtubeVideo" width="100%" height="100%" src="${ getYoutubeUrl }" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                    </div>
                  </div>
                `;

              }
              catch ( err ) {
                console.log( `ERROR templateHeroVideo`, err.message );
              }
            }
          </script>
        {% endif %}
      {% endfor %}

      {% assign otherBlockArr         =   sb | where: 'type', 'other_block' %}

      <div class="gallery-others" active-step="0" max="{{ otherBlockArr.size | minus: 1 }}">
        {%-liquid

          for block in otherBlockArr

            assign b                  =   block.settings

            assign link__             =   b.link | default: '#'

            echo '<a href="' | append: link__ | append: '" class="gallery-other-block jsLInkEvent" bid="' | append: block.id | append: '" style="background-color: ' | append: block.settings.color | append: ';">'

              if b.other_image != blank

                echo '<div class="gallery-image">'

                  assign img__        =   b.other_image | img_url: 'master'
                  assign img__Alt     =   b.other_image.alt | escape

                  echo '<img class="lazyload" '
                    echo ' src="' | append: img__ | append: '" '
                    echo ' alt="' | append: img__Alt | append: '" '
                  echo '>'
                echo '</div>'

              endif

              if b.text != blank

                echo '<div class="gallery-description">'
                  echo b.text
                echo '</div>'

              endif

              assign collectCSS       =   collectCSS | append: ' .gallery-others .gallery-other-block[bid="' | append: block.id | append: '"] {order: ' | append: b.orderNo | append: ';}'

            echo '</a>'

          endfor

          if otherBlockArr.size > 0

            echo '<span class="_controllerLeft_">'
              echo '<svg width="12" height="19" viewBox="0 0 12 19" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M11 18L2 9.5L11 1" stroke="white" stroke-width="2"/></svg>'
            echo '</span>'

            echo '<span class="_controllerRight_">'
              echo '<svg width="12" height="19" viewBox="0 0 12 19" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1 1L10 9.5L1 18" stroke="white" stroke-width="2"/></svg>'
            echo '</span>'

          endif
        -%}
      </div>

      <style>
        @media only screen and (max-width: 640px) {
          {{ collectCSS }}
        }
      </style>

    </div>
  </div>
{% endcapture %}


{% if ss.onViewLoad %}
	{% if section_galleryGrid == section.id %}
		{{ sectionHTML }}
	{% else %}

		<div class="onViewLoadSection section_galleryGrid" sec-id="{{ section.id }}"></div>

		<script>
      window.addEventListener('load', function() {

        require( `${ asset_url }__isInViewport.js` );

        setTimeout(()=>{
          onViewLoad__section_galleryGrid( 'onload' );
        }, {{ ss.loadAfter | times: 1000 }});
      });

			function onViewLoad__section_galleryGrid( typeIs = '' ) {
        try {

          const sectionIs                       =   `.onViewLoadSection.section_galleryGrid`;
          const checkSectionLoaded              =   $( sectionIs ).hasClass( `sectionLoaded` );
          const sectionID                       =   $( sectionIs ).attr( `sec-id` );

          if ( checkSectionLoaded == false ) {

            const isVisible                     =   isInViewport( sectionIs );

            if ( isVisible || typeIs == 'onload' ) {

              $( sectionIs ).addClass( 'sectionLoaded' );

              $.get( `/?section_id=${ sectionID }` , function ( r ) {

                $( sectionIs ).html( r );

              });

            }
          }

        }
        catch ( err ) {
          console.log( `ERROR onViewLoad__section_galleryGrid`, err.message );
        }
			}

			let wheeldelta_section_galleryGrid      =   {
				x: 0,
				y: 0
			};
			let wheeling_section_galleryGrid;
			$( window ).on('scroll', async function() {
				try {

					clearTimeout( wheeling_section_galleryGrid );
					wheeling_section_galleryGrid        =   setTimeout(async function() {
						wheeling_section_galleryGrid      =   undefined;

						wheeldelta_section_galleryGrid.x  =   0;
						wheeldelta_section_galleryGrid.y  =   0;

						onViewLoad__section_galleryGrid();

					}, 250);

				}
				catch ( err ) {
					console.log ( 'Error Scroll', err.message );
				}
			});
		</script>

	{% endif %}

{% else %}
	{{ sectionHTML }}
{% endif %}

<script>
  $( document )
  .on('click', '.gallery-others ._controllerLeft_', function( e ) {
    try {

      e.stopImmediatePropagation();

      const activeStep                        =   $( this ).closest( `.gallery-others` ).attr( `active-step` ) * 1;

      const nextStep                          =   activeStep - 1;

      if ( nextStep >= 0 ) {

        $( `.gallery-others .gallery-other-block` ).css( `transform`, `translateX(-${ nextStep }00%)` );

        $( this ).closest( `.gallery-others` ).attr( `active-step`, nextStep );

      }

    }
    catch ( err ) {
      console.log( `ERROR .gallery-others ._controllerLeft_`, err.message );
    }
  })

  .on('click', '.gallery-others ._controllerRight_', function( e ) {
    try {

      e.stopImmediatePropagation();

      const activeStep                        =   $( this ).closest( `.gallery-others` ).attr( `active-step` ) * 1;

      const maxStep                           =   $( this ).closest( `.gallery-others` ).attr( `max` ) * 1;

      const nextStep                          =   activeStep + 1;

      if ( nextStep <= maxStep ) {

        $( `.gallery-others .gallery-other-block` ).css( `transform`, `translateX(-${ nextStep }00%)` );

        $( this ).closest( `.gallery-others` ).attr( `active-step`, nextStep );

      }

    }
    catch ( err ) {
      console.log( `ERROR .gallery-others ._controllerRight_`, err.message );
    }
  })
  ;

  $( window ).resize(function () {
    try {

      const screenWidth                       =   $( this ).width();

      if ( screenWidth > 640 ) {

        $( `.gallery-others` ).attr( `active-step`, 0 );
        $( `.gallery-others .gallery-other-block` ).css( `transform`, `translateX(-0%)` );

      }

    }
    catch ( err ) {
      console.log( `ERROR resize`, err.message );
    }
  });
</script>

{% schema %}
{
  "name": "Grid Gallery",
  "class": "index-section index-gallery-grid",
  "settings": [
		{
			"type"      :   "checkbox",
			"id"        :   "onViewLoad",
			"label"     :   "On View Load this section",
			"default"   :   true
		},
    {
      "type"      :   "range",
      "id"        :   "loadAfter",
      "label"     :   "Self Load after",
      "unit"      :   "sec",
      "min"       :   1,
      "max"       :   20,
      "step"      :   1,
      "default"   :   5
    }
	],
  "blocks": [
    {
      "type": "main_block",
      "name": "Main Block",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Background Image"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Heading",
          "default": "Now anyone can roti!"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Description",
          "default": "<p>Join the crowd! Check out what users have to say about the Rotimatic here.</p>"
        },
        {
          "type": "text",
          "id": "button_label",
          "label": "Button label"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "Button link"
        },
		    {
          "type": "checkbox",
		      "id": "show_play_icon",
          "label": "Play Icon",
		      "default": true
		    },
		    {
          "type": "image_picker",
          "id": "play_icon",
          "label": "Play Icon"
        },
		    {
          "type": "checkbox",
          "id": "button_popup",
          "label": "Modal Popup",
          "default": true
		    }
      ]
    },
    {
      "type": "other_block",
      "name": "Other Block",
      "settings": [
        {
          "type": "image_picker",
          "id": "other_image",
          "label": "Image"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Description",
          "default": "<p>A potential game changer for roti-loving households</p>"
        },
        {
          "type": "color",
          "id": "color",
          "label": "Background Color"
        },
        {
          "type"    :   "url",
          "id"      :   "link",
          "label"   :   "Block Link"
        },
        {
          "type"    :   "text",
          "id"      :   "orderNo",
          "label"   :   "Mobile Order Number"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Grid Gallery",
      "category": "Grid Gallery"
    }
  ]
}
{% endschema %}
